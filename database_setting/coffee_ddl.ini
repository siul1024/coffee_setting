[name]
database_name = coffee

[user]
user_sql = GRANT all ON coffee.* TO 'user_coffee'@'localhost' IDENTIFIED BY 'rootroot'

[sql]
product =
    CREATE TABLE product(
        code CHAR(4) NOT NULL,
        name VARCHAR(20) NULL,
        PRIMARY KEY (code))

sale =
    CREATE TABLE sale(
        no int(11) auto_increment,
        code char(4) not null,
        price int(11) not null,
        saleCnt int(11) not null,
        marginRate int(11) not null,
        primary key(no),
        foreign key(code) references product(code))

sale_detail =
    create table sale_detail(
        no int(11) not null,
        sale_price int(11) not null,
        addTax int(11) not null,
        supply_price int(11) not null,
        marginPrice int(11) not null,
        Foreign key (no) references sale(no) on delete cascade)

tri_sale_insert_after_detail =
    create trigger tri_sale_insert_after_detail
    after insert on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * (new.marginRate/100));
        insert into sale_detail(no, sale_price, addTax, supply_price, marginPrice)
        values(new.no, @saleprice, @addtax, @supprice, @marprice);
    end

tri_sale_update_after_detail =
    create trigger tri_sale_update_after_detail
    after update on sale
    for each row
    begin
        set @saleprice = new.price * new.salecnt,
        @addtax = ceil(@saleprice/11),
        @supprice = @saleprice - @addtax,
        @marprice = round(@supprice * (new.marginRate/100));
        update coffee.sale_detail
        set sale_price=@saleprice, addTax=@addtax, supply_price=@supprice, marginPrice=@marprice
        where no = new.no;
    end

proc_saledetail_orderby =
    create procedure proc_saledetail_orderby (in isSalePrice boolean)
    begin
        if isSalePrice then
            select(select count(*)+1 from sale_detail s2 where s2.sale_price > s1.sale_price) rank,
    		    sale.code code, p.name name, price, salecnt, supply_price, addTax, sale_price, marginRate, marginPrice
		    from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code order by rank;
	    else
		    select (select count(*)+1 from sale_detail s2 where s2.marginPrice > s1.marginPrice) rank,
    		    sale.code code, p.name name, price, salecnt, supply_price, addTax, sale_price, marginRate, marginPrice
		    from sale inner join sale_detail s1 on sale.no = s1.no join product p on sale.code = p.code order by rank;
	    end if;
    end

